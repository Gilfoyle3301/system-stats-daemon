// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: metrics.proto

package collectorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsCollectorClient is the client API for MetricsCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsCollectorClient interface {
	CollectMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (MetricsCollector_CollectMetricsClient, error)
}

type metricsCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsCollectorClient(cc grpc.ClientConnInterface) MetricsCollectorClient {
	return &metricsCollectorClient{cc}
}

func (c *metricsCollectorClient) CollectMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (MetricsCollector_CollectMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricsCollector_ServiceDesc.Streams[0], "/collector.MetricsCollector/CollectMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsCollectorCollectMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricsCollector_CollectMetricsClient interface {
	Recv() (*MetricsResponse, error)
	grpc.ClientStream
}

type metricsCollectorCollectMetricsClient struct {
	grpc.ClientStream
}

func (x *metricsCollectorCollectMetricsClient) Recv() (*MetricsResponse, error) {
	m := new(MetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsCollectorServer is the server API for MetricsCollector service.
// All implementations must embed UnimplementedMetricsCollectorServer
// for forward compatibility
type MetricsCollectorServer interface {
	CollectMetrics(*MetricsRequest, MetricsCollector_CollectMetricsServer) error
	mustEmbedUnimplementedMetricsCollectorServer()
}

// UnimplementedMetricsCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsCollectorServer struct {
}

func (UnimplementedMetricsCollectorServer) CollectMetrics(*MetricsRequest, MetricsCollector_CollectMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectMetrics not implemented")
}
func (UnimplementedMetricsCollectorServer) mustEmbedUnimplementedMetricsCollectorServer() {}

// UnsafeMetricsCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsCollectorServer will
// result in compilation errors.
type UnsafeMetricsCollectorServer interface {
	mustEmbedUnimplementedMetricsCollectorServer()
}

func RegisterMetricsCollectorServer(s grpc.ServiceRegistrar, srv MetricsCollectorServer) {
	s.RegisterService(&MetricsCollector_ServiceDesc, srv)
}

func _MetricsCollector_CollectMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsCollectorServer).CollectMetrics(m, &metricsCollectorCollectMetricsServer{stream})
}

type MetricsCollector_CollectMetricsServer interface {
	Send(*MetricsResponse) error
	grpc.ServerStream
}

type metricsCollectorCollectMetricsServer struct {
	grpc.ServerStream
}

func (x *metricsCollectorCollectMetricsServer) Send(m *MetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MetricsCollector_ServiceDesc is the grpc.ServiceDesc for MetricsCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector.MetricsCollector",
	HandlerType: (*MetricsCollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CollectMetrics",
			Handler:       _MetricsCollector_CollectMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metrics.proto",
}
